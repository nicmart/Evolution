"r = 3 in
v = @point(uniform(-r, r), uniform(-r, r)) in

symm = e -> flatMap(e, p ->
  cons(p, cons(-p, cons(point(-x(p), y(p)), cons(point(x(p), -y(p)), empty))))
) in

symm(integrate(point(0, 0), v))
  "

// Clifford
scale = 500 in

scaleInv = .002 in

a = -1.4 * scaleInv  in

b = 1.6 * scaleInv in

c = 1.1 in

d = 0.7  in

rnd = @point(uniform(left, right), uniform(bottom, top)) in
trajectory = p -> 

solve1(
  const(p -> -p + scale * point(
    sin(a * y(p)) + c * cos(a * x(p)),
    sin(b * x(p)) + d * cos(b * y(p))
  )),
  p 
) in
   
trajectory(point(0, 0))

// Another Clifford

scale = 500 in

scaleInv = .002 in

a = -1.4 * scaleInv  in

b = 1.6 * scaleInv in

c = 1.1 in

d = 0.7  in

rnd = @point(uniform(left, right), uniform(bottom, top)) in
trajectory = p -> 

solve1(
  const(p -> -p + scale * point(
    sin(a * y(p)) + c * cos(a * x(p)),
    sin(b * x(p)) + d * cos(b * y(p)) + .5227
  )),
  p 
) in
   
trajectory(point(0, 0))

// Double-speed brownian (use torus canvas please)

rnd = r -> n -> take(n, @point(uniform(-r, r), uniform(-r, r))) in
v1 = rnd(2, 1000) in
v2 = rnd(10, 100) in

integrate(point(0, 0), flatten(uniformFrom(2, [v1, v2]))) 

// Serpinsky triangle

p1 = point(0, top) in
p2 = point(left, bottom) in
p3 = point(right, bottom) in

vertexes = uniformFrom(3, [p1, p2, p3]) in

solve1(
  map(vertexes, v -> p -> -p + 0.5 * (v + p)),
  point(0, 0)
)

// fix is broken
"sliding = fix(self ->
    ts -> f -> mapCons(ts,
      t1 -> tail1 -> mapCons(tail1,
        t2 -> tail2 -> cons(f(t1, t2), self(tail1, f))
      )
    )
) in

noConsec = points -> flatMap(
  sliding(points, x1 -> x2 -> if(eq(x1, x2),  empty, cons(x1, empty))),
  x -> x
) in

xs = uniformChoice(point(0, 0), point(100, 200), point(-100, -100)) in

noConsec(xs)"

// fix is broken
"let(
  sliding,
  fix(self ->
    ts -> f -> mapCons(ts,
      t1 -> tail1 -> mapCons(tail1,
        t2 -> tail2 -> cons(f(t1, t2), self(tail1, f))
      )
    )
  ),

let(noConsec, points -> flatMap(sliding(points, x1 -> x2 -> if(eq(x1, x2),  empty, cons(x1, empty))), x -> x),

let(p1, point(left, top),
let(p2, point(left, bottom),
let(p3, point(right, top),
let(p4, point(right, bottom),

let(vertexes, noConsec(uniformChoice(p1, p2, p3, p4)),
k = .06 in
 
let(f, v -> p -> -p + k * v + (-k + 1) * p,
solve1(
  map(vertexes, v -> p -> -p + f(v, p)),
  point(0, 0)
)
 
))))))))"


// Grid of brownians
"r = 2 in
l = 100 in
gridSize = 100 in

rndPoint = @point(uniformDiscrete(left, right, gridSize), uniformDiscrete(bottom, top, gridSize)) in
brownian = p -> take(l,integrate(p, @point(uniform(-r, r), uniform(-r, r)))) in

flatMap(rndPoint, brownian)"


// Grid of symmetric brownians
"r = 3 in
l = 100 in
gridSize = 100 in

symm = e -> flatMap(e, p -> 
  cons(p, cons(-p, cons(point(-x(p), y(p)), cons(point(x(p), -y(p)), empty)))
)) in

translatedSymm = p -> e -> map(symm(map(e, x -> -p + x)), x -> p + x) in

rndPoint = @point(uniformDiscrete(left, right, gridSize), uniformDiscrete(bottom, top, gridSize)) in
brownian = p -> take(l, integrate(p, @point(uniform(-r, r), uniform(-r, r)))) in

flatMap(rndPoint, p -> translatedSymm(p, brownian(p)))"

// Brownian carpet
gridSize = 200 in
r = 6 in
xs = take(20, integrate(left, const(gridSize))) in
ys = take(10, integrate(bottom, const(gridSize))) in

points = flatMap(xs, x -> map(ys, y -> point(x, y))) in

symm = e -> flatMap(e, p -> 
  [p, -p, point(-x(p), y(p)), point(x(p), -y(p))]
) in

brownian = symm(integrate(point(0, 0), @point(uniform(-r, r), uniform(-r, r)))) in

flatMap(brownian, p -> map(points, q -> p + q))

// Grid of squared brownians
gridSize = 100 in

symm = e -> flatMap(e, p -> 
  [p, -p, point(-x(p), y(p)), point(x(p), -y(p))]
) in

translatedSymm = p -> e -> map(symm(map(e, x -> -p + x)), x -> p + x) in

rndPoint = @point(uniformDiscrete(left, right, gridSize), uniformDiscrete(bottom, top, gridSize)) in
  
l = 100 in
step = 10 in
ps = uniformFrom(4, [point(1, 0), point(0, 1), point(-1, 0), point(0, -1)]) in
vs = flatMap(ps, p -> take(step, const(p))) in
evo = p ->  take(l, integrate(p, vs)) in 
     
flatMap(rndPoint, p -> translatedSymm(p, evo(p)))

// Concentric circles

r1 = 300 in
w1 = .001 in
r2 = 100 in
w2 = .002 in
r3 = 100 in
w3 = 1 in
r4 = 10 in
w4 = .008 in
r5 = 100 in
w5 = .008 in

circle = r -> w -> @polar(const(r), integrate(0, const(w))) in



circle(r1, w1) +
circle(r2, w2) +
circle(r3, w3) +
circle(r4, w4) +
circle(r5, w5)


// Grid of squared and rounded brownians

l = 200 in
gridSize = 200 in

symm = e -> flatMap(e, p -> 
  cons(p, cons(-p, cons(point(-x(p), y(p)), cons(point(x(p), -y(p)), empty)))
)) in

translatedSymm = p -> e -> map(symm(map(e, x -> -p + x)), x -> p + x) in

rndPoint = @point(uniformDiscrete(left, right, gridSize), uniformDiscrete(bottom, top, gridSize)) in

r = 20 in
v = .3 in
w = v / r in

arcLength =floor(.5 * PI / w) in
arc = angle -> take(arcLength, @polar(const(r * w), integrate(angle, const(w)))) in  
segmentLength = floor(r / v) in  
segment = p -> take(segmentLength, const(v * p)) in 
vs = uniformFrom(8, [
  arc(0), arc(PI / 2), arc(PI), arc(3 * PI / 2),
  segment(point(1, 0)), segment(point(0, 1)), segment(point(-1, 0)), segment(point(0, -1))
]) in 

evo = p -> take(floor(1 + l / v), integrate(p, flatMap(vs, x -> x))) in


flatMap(rndPoint, p -> translatedSymm(p, evo(p)))

// Vortex

a = -.000001 in
k = 0.01 in
rnd = @point(uniform(left, right), uniform(bottom, top)) in

trajectory = p -> 

solve1(
  const(q -> k * point(
     -y(q) + a * x(q) * norm(q)^2,
     x(q) + a * y(q) * norm(q)^2
  )),
  p
) in


flatMap(rnd, p -> take(100, trajectory(p)))

// Grid of concentric circles
r = .03 in
s = 100 in
g = 100 in

mid = point(g/2, g/2) in
vectorField = p -> r * (-mid +point(y(p) % g, (-x(p)) % g)) in
points = @point(uniform(left, right), uniform(bottom, top)) in

line = p -> solve1(
  const(vectorField),
  p
) in

flatMap(points, p -> take(s, line(p)))

 
Grid of rombuses

r = .01 in
s = 60 in
g = 150 in

a = 0 in b = 1 in c = -1 in d = 0 in

mid = point(g/2, g/2) in


singleVectorField = p -> point(
  a * x(p) + b * y(p),
  c * x(p) + d * y(p)
) in

pointSign = p -> (abs(x(p)) + abs(y(p))) * point(sign(x(p)), sign(y(p))) in

pointMod = p -> -mid + point(
  x(p) % g,
  y(p) % g
) in

vectorField = p -> r * (singleVectorField(pointSign(pointMod(p)))) in

points = @point(uniform(left, right), uniform(bottom, top)) in

line = p -> solve1(
  const(vectorField),
  p
) in

flatMap(points, p -> take(s, line(p)))

// Rotational-symmetric brownian
n = 8 in
r = 3 in

a = 1 in b = 1 in c = 1 in d = 1 in

ps = integrate(point(0, 0), @point(uniform(-r, r), uniform(-r, r))) in

angles = n -> take(n, integrate(0, const(2 * PI / toDbl(n)))) in

rotate = angle -> p -> point(
  x(p) * cos(angle) +-y(p) * sin(angle),
  x(p) * sin(angle) + y(p) * cos(angle)
) in

nAngles = angles(n) in

flatMap(ps, p -> map(angles(n), a -> rotate(a, p)))



// Spiral and then 2nd order brownian

r = .02 in
w = .01 in

r2 = .02 in

spiral = @polar(integrate(0, const(r)), integrate(0, const(w))) in

speed1 = mapCons(uniform(1000, 3000), n -> o -> take(floor(n), map(spiral, v -> p -> v - p))) in

speed2v = integrate(point(0, 0), @point(uniform(-r2, r2), uniform(-r2, r2))) in

speed2 = take(1000, map(speed2v, v -> p -> v)) in

speed = concat(speed1, speed2) in

solve1(
  speed,
  point(0, 0)
)


// Broken

"r = 2 in
w = .01 in

r2 = .02 in

spiral = @polar(integrate(0, const(r)), integrate(0, const(w))) in
spiralAcc = map(derive2(spiral), p -> (x -> v -> p - v)) in
tangentAcc = const(x -> v -> point(0, 0)) in

spiralAccs = map(uniform(1000, 3000), n -> take(floor(n), spiralAcc)) in
tangentAccs = map(uniform(800, 1000), n -> take(floor(n), tangentAcc)) in

acc = flatMap(zipWith(spiralAccs, tangentAccs, x -> y -> concat(x, y)), z -> z) in

solve2(
  acc,
  point(0, 0),
  point(0, 0)
)
"

// Broken
"r = 2 in
w = 0.01 in

r2 = .02 in
c = 5 in


spiral = @polar(integrate(0, const(r)), integrate(0, const(w))) in
spiralAcc = map(derive2(spiral), p -> (x -> v -> versor(p - v))) in
tangentAcc = const(x -> v -> point(0, 0)) in



spiralAccs = map(uniform(3000, 6000), n -> take(floor(n), spiralAcc)) in
tangentAccs = map(uniform(800, 1000), n -> take(floor(n), tangentAcc)) in

acc = flatten(zipWith(spiralAccs, tangentAccs, x -> y -> concat(x, y))) in

solve2(
  acc,
  point(0, 0),
  point(0, 0)
)
"

// Parallel lines with circular angles
"
k = 10 in
step = 1 in
radius = 20 in
angularSpeedFactor = 1 in
straightStepLength = 100 in
maxStraightSteps = 8 in
numberOfParallelLines = 4 in
distanceBetweenParallelLines = 10 in

angle = 3 * PI / 2 in


rotate = v -> alpha -> point(x(v) * cos(alpha) - y(v) * sin(alpha), x(v) * sin(alpha) + y(v) * cos(alpha)) in

rotation = v -> map(
  take(1 + floor(angle * radius / angularSpeedFactor), integrate(0, const(angularSpeedFactor / radius))),
  a -> angularSpeedFactor * rotate(v, -a)
) in

s = n -> v -> concat(take(floor(n), const(v)), rotation(v)) in

versors = flatten(const([point(step, 0), point(0, step), point(-step, 0), point(0, -step)])) in

lengths = uniformFrom(maxStraightSteps, map(integrate(3, const(1)), k -> straightStepLength * k + 2 * radius)) in 

speed = flatten(zipWith(lengths, versors, s)) in



flatten(mapWithDerivative(
  x -> v -> take(numberOfParallelLines, integrate(x, const(distanceBetweenParallelLines *rotate(versor(v), pi / 2)))),
  integrate(point(0, 0), speed)
))

"

// Straight lines with spiral angles
k = 2 in
step = 1 in
radius = 5 in
spiralDistances = .2 in
numberOfRotations = 3 in
angularSpeedFactor = .2 in
straightStepLength = 50 in
maxStraightSteps = 32 in


angle = 3 * PI / 2 in
rotationIterations = numberOfRotations * (1 + floor(angle * radius / angularSpeedFactor)) in


rotate = v -> alpha -> spiralDistances * alpha *  point(x(v) * cos(alpha) - y(v) * sin(alpha), x(v) * sin(alpha) + y(v) * cos(alpha)) in

rotation = v -> map(
  take(rotationIterations, integrate(0, const(angularSpeedFactor / radius))),
  a -> angularSpeedFactor * rotate(v, -a)
) in

s = n -> v -> concat(take(floor(n), const(v)), rotation(v)) in

versors = flatten(const([point(step, 0), point(0, step), point(-step, 0), point(0, -step)])) in

lengths = uniformFrom(maxStraightSteps, map(integrate(3, const(1)), k -> straightStepLength * k + 2 * radius)) in 

speed = flatten(zipWith(lengths, versors, s)) in



integrate(point(0, 0), speed)

// Perlin noise 1
rndPoint = @point(uniform(left, right), uniform(bottom, top)) in
f = 60 in
v = 2 in

n <- noise in
r <- uniform(1, 256) in


line = p -> solve1(
  const(q -> polar(v, 6 * (2^.5) * PI * n((1 / f) * q))),
  p
) in

flatMap(
  rndPoint,
  p -> take(300, line(p))
)

// Horizontal perlin noise lines
---------
a = 300 in
f = 300 in
v = 1 in
length = 3000 in
d = 30 in
yVar = 3 in

mapCons(octaveNoise, on -> notUsed ->
  n = x -> y -> on(8, .4, point(x, y)) in

  flatMap(
    range(bottom-100, top+100, d),
    startY -> take(length, map(
      integrate(left, const(v)),
      x -> point(x, startY + a * n(x/f, startY / (f * yVar)))
    ))
  )
)

// Perlin Mountains
---------
a = 300 in
f = 300 in
v = 1 in
length = 3000 in
d = 5 in
yVar = 1 in

mapCons(octaveNoise, on -> notUsed ->
  n = on(8, .4) in

  flatMap(
    range(bottom - 100, top + 100, d),
    startY -> take(length, map(
      integrate(left, const(v)),
      x -> point(x, startY + a * n(point(x/f, startY / (f * yVar))))
    ))
  )
)

Abstract lines (perin noise )
---------
f = 600 in
v = 2 in
size = 100 in
r = 5 in

rndPoint = integrate(point(0, 0), @point(uniform(-r, r), uniform(-r, r))) in
coord = d -> toDbl(floor(d / size)) * size in
mod = p -> point(coord(x(p)), coord(y(p))) in

mapCons(noise, n -> notUsed ->
  vectorField = q -> polar(v, 6 * (2^.5) * PI * n(x(mod(q))/f, y(mod(q))/f)) in

    line = p -> solve1(
      @(vectorField),
      p
    ) in
    flatMap(
      rndPoint,
      p -> take(50, line(p))
    )

)

// Symmetric abstract lines
---------
f = 600 in
v = 2 in
size = 30 in
r = 10 in

rndPoint = integrate(point(0, 0), @point(uniform(-r, r), uniform(-r, r))) in
coord = d -> toDbl(floor(d / size)) * size in
mod = p -> point(coord(x(p)), coord(y(p))) in

symm = e -> flatMap(e, p -> [p, -p, point(-x(p), y(p)), point(x(p), -y(p))]) in

symm(
mapCons(noise, n -> notUsed ->
  vectorField = q -> polar(v, 6 * (2^.5) * PI * n(point(x(mod(q))/f, y(mod(q))/f))) in

    line = p -> solve1(
      const(vectorField),
      p
    ) in
    flatMap(
      rndPoint,
      p -> take(30, line(p))
    )
))

// Nested brownians
---------
rndPoint = @point(uniform(left, right), uniform(bottom, top)) in
f = 300 in
f2 = .1 in
v = 2 in
a = 1/1000 in
b = 1/1000 in
c = 5 in
k = 50 in

n1 <- noise in 
n2 <- noise in 
n3 <- noise in 


line = p ->
q = point(n1(f2 * p), n2(f2 * p)) in

solve1(
  const(q -> polar(v, k * (2^.5) * PI * n3((1/f)*q))),
    p
  ) in
flatMap(
  rndPoint,
  p -> take(300, line(p))
)



// Circle + noise
---------

octaves = 4 in
persistence = 5 in
v = .0002 in

mapCons(octaveNoise, on -> notUsed ->
    n = on(octaves, persistence) in

    map(
      integrate(0, const(v)),
      w -> polar(300 + 100 *n(polar(1, w)), w)
    )

)

// Spiral with noise
---------
octaves = 4 in
persistence = .001 in
f = 50 in
k = 40 in
w = .02 in
r = .2 in

e = mapCons(octaveNoise, on -> notUsed ->
    n = on(octaves, persistence) in
    zipWith(
      integrate(0, const(r)),
      integrate(0, const(w)),
      r -> w -> polar(r + k * n((1 / f) * polar(r, w)), w)
    )

) in

integrate(point(0, 0), map(derive(e), v -> v))

Explosive normal turbolence
---------
p = 0.01 in
turbolenceStrength = 10 in
turbolenceLength = 3000 in
nonTurbolenceLength = 100 in
randomWalkStep = 2 in
turbolenceX = normal(1, turbolenceStrength) in
turbolence = @point(turbolenceX, turbolenceX) in

flatMap(
  uniform(0, 1),
  d -> if (
    d < p,
    take(turbolenceLength, turbolence),
    take(nonTurbolenceLength, @(point(0, 0)))
  )
)



Pulsating normal turbolence
---------

a = 200 in

p = 0.01 in
turbolenceStrength = 50 in
turbolenceLength = 10000 in
nonTurbolenceLength = 100 in
randomWalkStep = 2 in

time = integrate(0, const(1)) in
f = x -> smoothstep(0, turbolenceLength/2, x) in
phi = x -> 1 - f(abs(x - turbolenceLength/2)) in
scalingFactor = map(time, phi) in
turbolenceX = scalingFactor * normal(1, turbolenceStrength) in
turbolence = @point(turbolenceX, turbolenceX) in

flatten(const(take(floor(turbolenceLength), turbolence)))






Random walk with pulsatingTurbolence
---------
a = 200 in

p = 0.01 in
turbolenceStrength = 10 in
turbolenceLength = 30000 in
nonTurbolenceLength = 100 in
randomWalkStep = 3 in



time = integrate(0, const(1)) in
f = x -> smoothstep(0, turbolenceLength/2, x) in
phi = x -> 1 - f(abs(x - turbolenceLength/2)) in
scalingFactor = map(time, phi) in
turbolenceX = scalingFactor * normal(1, turbolenceStrength) in
turbolence = @point(turbolenceX, turbolenceX) in

randomWalk = integrate(
  point(0, 0),
  @point(
    uniform(-randomWalkStep, randomWalkStep),
    uniform(-randomWalkStep, randomWalkStep)
  )
) in

pulsatingTurbolence = flatMap(
  uniform(0, 1),
  d -> if (
    d < p,
    take(floor(turbolenceLength), turbolence),
    take(nonTurbolenceLength, const(point(0, 0)))
  )
) in

randomWalk + pulsatingTurbolence


Random walk with pulsating step size
---------
p = 0.03 in
turbolenceStrength = 10 in
turbolenceLength = 10000 in
nonTurbolenceLength = 100 in
randomWalkStep = 2 in
upwardBias = 0.3 in



time = integrate(0, const(1)) in
f = x -> smoothstep(0, turbolenceLength/2, x) in
phi = x -> 1 - f(abs(x - turbolenceLength/2)) in
scalingFactor = map(time, phi) in
turbolenceX = scalingFactor * normal(1, turbolenceStrength) in

pulsatingTurbolence = flatMap(
  uniform(0, 1),
  d -> if (
    d < p,
    take(floor(turbolenceLength), turbolenceX),
    take(nonTurbolenceLength, const(1))
  )
) in

e = integrate(
  point(0, bottom),
  pulsatingTurbolence * @point(
    uniform(-randomWalkStep, randomWalkStep),
    uniform(-randomWalkStep, randomWalkStep + upwardBias)
  )
) in


parallel(take(50, const(e)))


// This takes 39 seconds in predicates unification!

Minimised (essential the point at the end):
a = 1 in

x = a * a * a * a * a * a * point(0, 0) in 

const(point(0, 0))

// Disturbed straight lines with spiral angles
---------
k = 2 in
step = 1 in
radius = 5 in
spiralDistances = .2 in
numberOfRotations = 20 in
angularSpeedFactor = .2 in
straightStepLength = 50 in
maxStraightSteps = 32 in
turbolenceStrength = 30 in
octaves = 4 in
persistence = .3 in

f = 100 in


angle = 3 * PI / 2 in
rotationIterations = numberOfRotations * (1 + floor(angle * radius / angularSpeedFactor)) in


rotate = v -> alpha -> spiralDistances * alpha *  point(x(v) * cos(alpha) - y(v) * sin(alpha), x(v) * sin(alpha) + y(v) * cos(alpha)) in

rotation = v -> map(
  take(rotationIterations, integrate(0, const(angularSpeedFactor / radius))),
  a -> angularSpeedFactor * rotate(v, -a)
) in

s = n -> v -> concat(take(floor(n), const(v)), rotation(v)) in

versors = flatten(const([point(step, 0), point(0, step), point(-step, 0), point(0, -step)])) in

lengths = uniformFrom(maxStraightSteps, map(integrate(3, const(1)), k -> straightStepLength * k + 2 * radius)) in

speed = flatten(zipWith(lengths, versors, s)) in


mapCons(map(octaveNoise, n -> n(octaves, persistence)), n1 -> noise2 ->
  mapWithDerivative(
    p -> v -> p + turbolenceStrength * (n1((1/f) * p)/norm(v)) * point(y(v), -x(v)),
    integrate(point(0, 0), speed)
  )
)


Grid
---------
gridSize = 50 in

toEdge = p -> [point(0, y(p)), point(x(p), 0)] in

points = @point(uniform(left, right), uniform(top, bottom)) in


inCell = f -> p ->
  pInCell = point(x(p) % gridSize, y(p) % gridSize) in
  pCell = p - pInCell in
  map(f(pInCell), p-> p + pCell)
in

flatmap(
  points,
  inCell(toEdge)
)
]
Perturbed grid
---------
gridSize = 100 in
noiseStrength = 100 in
freq = 100 in
freq2 = 50 in
octaves = 10 in
persistence = .2 in
anglerange = 900 in

toEdge = p -> [point(0, y(p)), point(x(p), 0)] in

points = @point(uniform(left, right), uniform(top, bottom)) in


inCell = f -> p ->
  pInCell = point(x(p) % gridSize, y(p) % gridSize) in
  pCell = p - pInCell in
  map(f(pInCell), p-> p + pCell)
in


flatMap(octaveNoise, on ->
  n = on(octaves, persistence) in
  map(flatmap(
    points,
    inCell(toEdge)
  ), p -> p + polar(noisestrength * n((1/freq2) * p), anglerange * pi * n((1/freq) * p)))
)

Carpet of symmetric brownians
---------
r = 3 in
l = 100 in
gridSize = 100 in

symm = e -> flatMap(e, p ->
  cons(p, cons(-p, cons(point(-x(p), y(p)), cons(point(x(p), -y(p)), empty)))
)) in

translatedSymm = p -> e -> map(symm(map(e, x -> -p + x)), x -> p + x) in

rndPoint = @point(uniformDiscrete(left, right, gridSize), uniformDiscrete(bottom, top, gridSize)) in
brownian = p -> take(l, integrate(p, @point(uniform(-r, r), uniform(-r, r)))) in

flatMap(rndPoint, p -> translatedSymm(p, brownian(p)))

Perin Noise
---------
rndPoint = @point(uniform(left, right), uniform(bottom, top)) in
f = 60 in
v = 2 in

n <- noise in
r <- uniform(1, 256) in

line = p -> solve1(
  const(q -> polar(v, 6 * (2^.5) * PI * n((1 / f) * q))),
  p
) in
flatMap(
  rndPoint,
  p -> take(300, line(p))
)


Perlin Noise Horizontal lines
---------
a = 300 in
f = 300 in
v = 1 in
length = 3000 in
d = 30 in
yVar = 3 in

on <- octaveNoise in

n = x -> y -> on(8, .4, point(x, y)) in

flatMap(
  range(bottom-100, top+100, d),
  startY -> take(length, map(
    integrate(left, const(v)),
    x -> point(x, startY + a * n(x/f, startY / (f * yVar)))
  ))
)

---------
grid = gridSize -> @point(
  uniformDiscrete(left, right, gridSize),
  uniformDiscrete(bottom, top, gridSize)
) in

grid = gridSize -> flatMap(
  range(bottom, top, gridSize),
  y -> map(
    range(left, right, gridSize),
    x -> point(x, y)
  )
) in

onPoints = points -> drawings -> length ->
  flatten(zipWith(
    points,
    drawings,
    p -> drawing -> take(length, map(drawing, q -> q + p))
  ))
in

circle = r -> w ->
  @polar(const(r), integrate(0, const(w)))
in

w1s = uniformDiscrete(3, 7, 1) in
w2s = uniformDiscrete(-5, -2, 1) in
rs = uniformDiscrete(10, 30, 1) in

mainCircles = k -> map(w1s, w -> circle(10, k * w)) in
secondaryCircles = k ->zipWith(
  w2s,
  rs,
  w -> r -> circle(r, k * w)
) in

circles = k ->
  zipWith(
    mainCircles(k),
    secondaryCircles(k),
    c1 -> c2 -> c1 + c2
  )
in



//onPoints(grid(100), circles)

k = .03 in
length = 20 in

onPoints(grid(80), circles(k), floor(length / k))

Concentric Circles 1
---------
grid = gridSize -> @point(
  uniformDiscrete(left, right, gridSize),
  uniformDiscrete(bottom, top, gridSize)
) in

grid = gridSize -> flatMap(
  range(bottom, top, gridSize),
  y -> map(
    range(left, right, gridSize),
    x -> point(x, y)
  )
) in

onPoints = points -> drawings -> length ->
  flatten(zipWith(
    points,
    drawings,
    p -> drawing -> take(length, map(drawing, q -> q + p))
  ))
in

circle = r -> w ->
  @polar(const(r), integrate(0, const(w)))
in

w1s = uniformDiscrete(3, 100, 21) in
w2s = uniformDiscrete(-100, 100, 3) in
w3s = uniformDiscrete(-100, 100, 5) in
rs = uniformDiscrete(10, 30, 1) in
r3s = uniformDiscrete(1, 50, 1) in

mainCircles = k -> map(w1s, w -> circle(10, k * w)) in

secondaryCircles = k ->zipWith(
  w2s,
  rs,
  w -> r -> circle(r, k * w)
) in

thirdCircles = k -> zipWith(
  w3s,
  r3s,
  w -> r -> circle(r, k * w)
) in

circles = k ->
  zipWith(
    zipWith(
      mainCircles(k),
      secondaryCircles(k),
      c1 -> c2 -> c1 + c2
    ),
    thirdCircles(k),
    c12 -> c3 -> c12 + c3
)
in



//onPoints(grid(100), circles)

k = .01 in
length = 20 in

onPoints(grid(150), circles(k), floor(length / k))
---------
grid = gridSize -> @point(
  uniformDiscrete(left, right, gridSize),
  uniformDiscrete(bottom, top, gridSize)
) in

grid = gridSize -> flatMap(
  range(bottom, top, gridSize),
  y -> map(
    range(left, right, gridSize),
    x -> point(x, y)
  )
) in

onPoints = points -> drawings -> length ->
  flatten(zipWith(
    points,
    drawings,
    p -> drawing -> take(length, map(drawing, q -> q + p))
  ))
in

circle = r -> w ->
  @polar(const(r), integrate(0, const(w)))
in

w1s = uniformDiscrete(3, 100, 2) in
w2s = uniformDiscrete(-10, 10, 1) in
w3s = uniformDiscrete(-10, 10, 1) in
rs = uniformDiscrete(10, 30, 1) in
r3s = uniformDiscrete(1, 50, 1) in

mainCircles = k -> map(w1s, w -> circle(10, k * w)) in

secondaryCircles = k ->zipWith(
  w2s,
  rs,
  w -> r -> circle(r, k * w)
) in

thirdCircles = k -> zipWith(
  w3s,
  r3s,
  w -> r -> circle(r, k * w)
) in

circles = k ->
  zipWith(
    zipWith(
      mainCircles(k),
      secondaryCircles(k),
      c1 -> c2 -> c1 + c2
    ),
    thirdCircles(k),
    c12 -> c3 -> c12 + c3
)
in



//onPoints(grid(100), circles)

k = .01 in
length = 20 in

onPoints(grid(150), circles(k), floor(length / k))
---------
grid = gridSize -> @point(
  uniformDiscrete(left, right, gridSize),
  uniformDiscrete(bottom, top, gridSize)
) in

grid = gridSize -> flatMap(
  range(bottom, top, gridSize),
  y -> map(
    range(left, right, gridSize),
    x -> point(x, y)
  )
) in

onPoints = points -> drawings -> length ->
  flatten(zipWith(
    points,
    drawings,
    p -> drawing -> take(length, map(drawing, q -> q + p))
  ))
in

circle = alpha -> r -> w ->
  @polar(const(r), integrate(alpha, const(w)))
in

w1s = uniformDiscrete(-3, 3, 1) in
w2s = uniformDiscrete(-30, 30, 1) in
w3s = uniformDiscrete(-30, 30, 1) in
w4s = uniformDiscrete(-30, 30, 1) in
w5s = uniformDiscrete(-3, 3, 1) in

r1s = uniformDiscrete(10, 50, 1) in
r2s = uniformDiscrete(10, 25, 1) in
r3s = uniformDiscrete(5, 10, 1) in
r4s = uniformDiscrete(2, 5, 1) in
r5s = uniformDiscrete(1, 2, 1) in


circles = k ->

  zipWith(
    uniform(0, 2 * pi),
    w1s,
    w2s,
    w3s,
    w4s,
    w5s,
    r1s,
    r2s,
    r3s,
    r4s,
    r5s,
    alpha -> w1 -> w2 -> w3 -> w4 -> w5 -> r1 -> r2 -> r3 -> r4 -> r5 ->
      circle(alpha, r1, k * w1) +
      circle(alpha, r2, k * w2) +
      circle(alpha, r3, k * w3) +
      circle(alpha, r4, k * w4) +
      circle(alpha, r4, k * w5)
  )

in


k = .01 in
length = 20 in

onPoints(grid(150), circles(k), floor(length / k))
---------
grid = gridSize -> @point(
  uniformDiscrete(left, right, gridSize),
  uniformDiscrete(bottom, top, gridSize)
) in

grid = gridSize -> flatMap(
  range(bottom, top, gridSize),
  y -> map(
    range(left, right, gridSize),
    x -> point(x, y)
  )
) in

onPoints = points -> drawings -> length ->
  flatten(zipWith(
    points,
    drawings,
    p -> drawing -> take(length, map(drawing, q -> q + p))
  ))
in

circle = alpha -> r -> w ->
  @polar(const(r), integrate(alpha, const(w)))
in

w1s = uniformDiscrete(-3, 3, 1) in
w2s = uniformDiscrete(-30, 30, 2) in
w3s = uniformDiscrete(-30, 200, 10) in
w4s = uniformDiscrete(-200, 30, 21) in
w5s = uniformDiscrete(-30, 30, 5) in

r1s = uniformDiscrete(10, 50, 1) in
r2s = uniformDiscrete(10, 25, 1) in
r3s = uniformDiscrete(5, 10, 1) in
r4s = uniformDiscrete(2, 5, 1) in
r5s = uniformDiscrete(1, 2, 1) in


circles = k ->

  zipWith(
    uniform(0, 2 * pi),
    w1s,
    w2s,
    w3s,
    w4s,
    w5s,
    r1s,
    r2s,
    r3s,
    r4s,
    r5s,
    alpha -> w1 -> w2 -> w3 -> w4 -> w5 -> r1 -> r2 -> r3 -> r4 -> r5 ->
      circle(alpha, r1, k * w1) +
      circle(alpha, r2, k * w2) +
      circle(alpha, r3, k * w3) +
      circle(alpha, r4, k * w4) +
      circle(alpha, r4, k * w5)
  )

in


k = .01 in
length = 20 in

onPoints(grid(150), circles(k), floor(length / k))
---------
grid = gridSize -> flatMap(
  range(bottom, top, gridSize),
  y -> map(
    range(left, right, gridSize),
    x -> point(x, y)
  )
) in

onPoints = points -> drawings -> length ->
  flatten(zipWith(
    points,
    drawings,
    p -> drawing -> take(length, map(drawing, q -> q + p))
  ))
in

circle = alpha -> r -> w ->
  @polar(const(r), integrate(alpha, const(w)))
in

w1s = uniformDiscrete(-3, 3, 1) in
w2s = uniformDiscrete(-30, 30, 2) in
w3s = uniformDiscrete(-30, 200, 10) in
w4s = uniformDiscrete(-200, 30, 21) in
w5s = uniformDiscrete(-30, 30, 5) in
w6s = uniformDiscrete(-5, 5, 1) in

r1s = uniformDiscrete(1, 50, .1) in
r2s = uniformDiscrete(1, 10, .1) in
r3s = uniformDiscrete(1, 30, .1) in
r4s = uniformDiscrete(1, 30, .1) in
r5s = uniformDiscrete(1, 10, .1) in
r6s = uniformDiscrete(4, 50, 1) in

r = 50 in

circles = k ->

  zipWith(
    uniform(0, 2 * pi),
    w1s,
    w2s,
    w3s,
    w4s,
    w5s,
    w6s,
    r1s,
    r2s,
    r3s,
    r4s,
    r5s,
    r6s,
    alpha -> w1 -> w2 -> w3 -> w4 -> w5 -> w6 -> r1 -> r2 -> r3 -> r4 -> r5 -> r6 ->
      sum = r1 + r2 + r3 + r4 + r5 + r6 in

      circle(alpha, r1 * r / sum, k * w1) +
      circle(alpha, r2 * r / sum, k * w2) +
      circle(alpha, r3 * r / sum, k * w3) +
      circle(alpha, r4 * r / sum, k * w4) +
      circle(alpha, r5 * r / sum, k * w5) +
      circle(alpha, r6 * r / sum, k * w6)
  )

in


k = .01 in
length = 20 in

onPoints(grid(150), circles(k), floor(length / k))
---------
a = 300 in
xFreq = 500 in
octaves = 16 in
persistence = .5 in
v = 2 in
length = floor((right - left) / v) in
d = 2 in
minY = bottom - 100 in

mapCons(octaveNoise, on -> notUsed ->
  n = on(octaves, persistence) in

  flatMap(
    range(minY, 1000, d),
    startY ->
      kx = .001 * (startY - minY) in
      ky = 1 / (1 + 0.001 * (startY - minY+50)) in
      take(length, map(
        integrate(left, const(v)),
        x -> point( x, ky * (startY + a * n(point(kx * x/xFreq, startY / xFreq))))
      ))
  )
)

Mountains, perspective
---------
a = 300 in
xFreq = 300 in
octaves = 8 in
persistence = .2 in
v = 2 in
length = floor((right - left) / v) in
s = 300 in // distance of the screen
cameraZ = 1000 in // height of the camera
offsetZ = cameraZ / 2 in
noiseStrength = 100 in // noise amplitude
maxDepth = 1000 in
depthStep = 5 in
startY = s/2 in

on <- octaveNoise in

f = x -> y -> -cameraZ + noiseStrength * on(octaves, persistence, point(x/xFreq, y/100)) in

flatMap(
  range(startY, maxDepth, depthStep),
  y ->
    xlength = (y/startY) * 2 * toDbl(length) / v in
    take(
      floor(xlength),
      map(
        integrate(-xlength, const(v)),
        x -> point(s * x / y, offsetZ + s * f(x, y) / y)
      )
    )
)

Mountains perspective 2
---------
a = 300 in
xFreq = 100 in
octaves = 8 in
persistence = .2 in
v = 2 in
length = floor((right - left) / v) in
s = 300 in // distance of the screen
cameraZ = 1000 in // height of the camera
offsetZ = cameraZ / 2 in
noiseStrength = 100 in // noise amplitude
maxDepth = 1000 in
depthStep = 3 in
startY = s/2 in

on1 <- octaveNoise in
on2 <- octaveNoise in

f = x -> y ->
  -cameraZ +
  noiseStrength * on1(octaves, persistence, point(x/xFreq, y/xFreq)) +
  700 * on2(1, .5, point(x/1000, y/500)
) in

flatMap(
  range(startY, maxDepth, depthStep),
  y ->
    xlength = (y/startY) * 2 * toDbl(length) / v in
    take(
      floor(xlength),
      map(
        integrate(-xlength, const(v)),
        x -> point(s * x / y, offsetZ + s * f(x, y) / y)
      )
    )
)


// Particles orbiting
---------
g = 100 in
k = .01 in
field = x -> v -> -(g/norm(x)^2) * versor(x) in




parallel(take(1000,

zipWith(
  @point(uniform(left, right), uniform(bottom, top)),
  uniform(0, 2 * pi),
  uniform(0, 1),
  p -> alpha -> r ->
    solve2(
      const(field),
      p,
      polar(r * k * norm(p), alpha)
    )
)

))
---------
grid = gridSize -> @point(
  uniformDiscrete(left, right, gridSize),
  uniformDiscrete(bottom, top, gridSize)
) in

onPoints = points -> drawings -> length ->
  flatten(zipWith(
    points,
    drawings,
    p -> drawing -> take(length, map(drawing, q -> q + p))
  ))
in

circle = r -> w ->
  @polar(const(r), integrate(0, const(w)))
in

w1s = uniformDiscrete(.1, .2, .01) in
w2s = uniformDiscrete(.1, 2, .1) in

circles =
  zipWith(w1s, w2s, w1 -> w2 ->
    circle(20, w1) + circle(20, w2)
  )
in



//onPoints(grid(100), circles)

onPoints(grid(100), circles, 400)
---------
grid = gridSize -> flatMap(
  range(bottom, top, gridSize),
  y -> map(
    range(left, right, gridSize),
    x -> point(x, y)
  )
) in

onPoints = points -> drawings -> length ->
  parallel(zipWith(
    points,
    drawings,
    p -> drawing -> take(length, map(drawing, q -> q + p))
  ))
in

circle = alpha -> r -> w ->
  @polar(const(r), integrate(alpha, const(w)))
in

w1s = uniformDiscrete(-300, 300, 1) in
w2s = uniformDiscrete(-3, 3, 1) in
w3s = uniformDiscrete(30, 50, 10) in
w4s = uniformDiscrete(-20, 1, 21) in
w5s = uniformDiscrete(-10, 10, 5) in

r1s = uniformDiscrete(1, 10, .1) in
r2s = uniformDiscrete(1, 10, .1) in
r3s = uniformDiscrete(1, 10, .1) in
r4s = uniformDiscrete(1, 10, .1) in
r5s = uniformDiscrete(1, 10, .1) in

r = 25 in

circles = k ->

  zipWith(
    uniform(0, 2 * pi),
    w1s,
    w2s,
    w2s,
    w2s,
    w2s,
    r1s,
    r2s,
    r2s,
    r2s,
    r2s,
    alpha -> w1 -> w2 -> w3 -> w4 -> w5 -> r1 -> r2 -> r3 -> r4 -> r5 ->
      sum = r1 + r2 + r3 + r4 + r5 in

      circle(alpha, r1 * r / sum, k * w1) +
      circle(alpha, r2 * r / sum, k * w2) +
      circle(alpha, r3 * r / sum, k * w3) +
      circle(alpha, r4 * r / sum, k * w4) +
      circle(alpha, r5 * r / sum, k * w5)
  )

in


k = .03 in
length = 10 in

onPoints(grid(40), circles(k), floor(length / k))
---------
grid = gridSize -> @point(
  uniformDiscrete(left, right, gridSize),
  uniformDiscrete(bottom, top, gridSize)
) in

grid = gridSize -> flatMap(
  range(bottom, top, gridSize),
  y -> map(
    range(left, right, gridSize),
    x -> point(x, y)
  )
) in

onPoints = points -> drawings -> length ->
  parallel(zipWith(
    points,
    drawings,
    p -> drawing -> take(length, map(drawing, q -> q + p))
  ))
in

circle = alpha -> r -> w ->
  @polar(const(r), integrate(alpha, const(w)))
in

w1s = @(1) in

r1s = uniformDiscrete(6, 20, 1) in
r2s = uniformDiscrete(1, 6, 1) in
factors = uniformFrom(3, [-1, -2, -3]) in


circles = k ->

  zipWith(
    uniform(0, 2 * pi),
    w1s,
    r1s,
    r2s,
    factors,
    alpha -> w1 -> r1 -> r2 -> factor ->
      circle(alpha, r1, k * w1) +
      circle(alpha, r2, k * (factor * r1 / r2) * w1)
  )

in


k = .05 in
length = 20 in

onPoints(grid(50), circles(k), floor(length / k))
---------

