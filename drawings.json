{"drawingState":{"seed":-5866495600919442000,"config":{"name":"drawing dsl","config":"flatMap(constant(take(20, integrate(point(-1000, 0), map(polar(uniform(0, 10), uniform(0, 6.28)), p -> add($p, point(100, 0)))))), x -> $x)"}},"rendererState":{"iterations":1000,"strokeSize":1,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"TorusCanvas":{}}}}
{"drawingState":{"seed":8199206608247848000,"config":{"name":"drawing dsl","config":"cartesian(integrate(0, constant(10)), solve1(constant(x -> multiply(0.04, $x)), 1))"}},"rendererState":{"iterations":1000,"strokeSize":10,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"InfiniteCanvas":{}}}}
{"drawingState":{"seed":8199206608247848000,"config":{"name":"drawing dsl","config":"cartesian(integrate(0, constant(0.1)), solve1(map(uniform(-2, 2), r -> x -> add(multiply(2, $r), multiply(0.001, inverse($x)))), 1))"}},"rendererState":{"iterations":1000,"strokeSize":1,"trail":{"active":true,"opacity":0.12},"offCanvasSettings":{"TorusCanvas":{}}}}
{"drawingState":{"seed":8199206608247848000,"config":{"name":"drawing dsl","config":"cartesian(integrate(-500, constant(3)), solve1(constant(x -> multiply(5, sin(multiply(0.01, $x)))), 1))"}},"rendererState":{"iterations":1000,"strokeSize":1,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"InfiniteCanvas":{}}}}
{"drawingState":{"seed":8199206608247848000,"config":{"name":"drawing dsl","config":"flatMap(uniform(-1000, 1000), r -> take(3000, cartesian(integrate(-1000, constant(1)), solve1(constant(x -> multiply(0.5, sin(multiply(0.01, $x)))), $r))))"}},"rendererState":{"iterations":1000,"strokeSize":1,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"InfiniteCanvas":{}}}}
{"drawingState":{"seed":8199206608247848000,"config":{"name":"drawing dsl","config":"flatMap(\n  uniform(-1, 1),\n  r -> take(\n    3000,\n    @point(\n      integrate(-1000, @(1)),\n      solve1(\n        @(x -> multiply(1, sin(multiply(0.01, x)))),\n        r\n      )\n    )\n  )\n)\n\n"}},"rendererState":{"iterations":1000,"strokeSize":1,"resolutionFactor":2,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"InfiniteCanvas":{}}}}
{"drawingState":{"seed":-4256111953965019600,"config":{"name":"drawing dsl","config":"\n\nflatMap(\n  integrate(bottom, @(10)),\n  r -> take(\n    3000,\n    @point(\n      integrate(left, @(1)),\n      solve1(\n        @(x -> sin(multiply(0.01, x))),\n        r\n      )\n    )\n  )\n)\n\n"}},"rendererState":{"iterations":1000,"strokeSize":1,"resolutionFactor":2,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"InfiniteCanvas":{}}}}
{"drawingState":{"seed":3397282308014883351,"config":{"name":"drawing dsl","config":"let(l, 0.2, let(f, 0.01, solve2(map(point(uniform(-$l, $l), uniform(-$l, $l)), r -> x -> v -> add($r, multiply(-$f, $v))), point(0, 0), point(0, 0))))"}},"rendererState":{"iterations":1000,"strokeSize":1,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"TorusCanvas":{}}}}
{"drawingState":{"seed":-7158149272253565978,"config":{"name":"drawing dsl","config":"flatMap(constant(take(200, solve2(map(point(uniform(-0.2, 0.2), uniform(-0.2, 0.2)), r -> x -> v -> add($r, multiply(-0.001, $v))), point(0, 0), point(0, 0)))), x -> $x)"}},"rendererState":{"iterations":1000,"strokeSize":1,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"TorusCanvas":{}}}}
{"drawingState":{"seed":4102177774936312300,"config":{"name":"drawing dsl","config":"flatMap(constant(take(200, solve2(map(point(uniform(-0.8, 0.1), uniform(-0.8, 0.5)), r -> x -> v -> add($r, multiply(-0.01, $v))), point(0, 0), point(0, 0)))), x -> $x)"}},"rendererState":{"iterations":1000,"strokeSize":1,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"InfiniteCanvas":{}}}}
{"drawingState":{"seed":-808558188806159900,"config":{"name":"drawing dsl","config":"flatMap(uniform($left, $right), x -> take(30, flatMap(uniform($bottom, $top), y -> point(integrate($x, constant(1)), solve1(constant(z -> multiply(0.00001, multiply($z, add(1, -$z)))), $y)))))"}},"rendererState":{"iterations":1000,"strokeSize":1,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"InfiniteCanvas":{}}}}
{"drawingState":{"seed":8390910909900460000,"config":{"name":"drawing dsl","config":"l = 10 in\nhSpeed = 2 in\nw = 0.01 in\namplitude = 10 in\n\nrndPoint =cartesian(uniform($left, $right), uniform($bottom, $top)) in\n\ntrajectory = p -> cartesian(\n  integrate(x($p), constant($hSpeed)),\n  solve1(constant(z -> $amplitude * sin($w * $z)), y($p))\n) in \n\nflatMap(\n  $rndPoint,\n  p -> take(\n    $l,\n    $trajectory($p)\n  ) \n)"}},"rendererState":{"iterations":1000,"strokeSize":1,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"TorusCanvas":{}}}}
{"drawingState":{"seed":-808558188806159900,"config":{"name":"drawing dsl","config":"flatMap(uniform($left, $right), x -> take(10, flatMap(uniform($bottom, $top), y -> point(integrate($x, constant(1)), solve1(constant(z -> multiply(3, add(sin(multiply(0.003, $z)), add(sin(multiply(0.05, $z)), sin(multiply(0.006, $z)))))), $y)))))"}},"rendererState":{"iterations":1000,"strokeSize":1,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"InfiniteCanvas":{}}}}
{"drawingState":{"seed":-8135008510173522000,"config":{"name":"drawing dsl","config":"flatMap(\n  uniform($left, $right),\n  x -> take(\n    10000,\n    flatMap(\n      uniform($bottom, $top),\n      y -> map(\n        cartesian(\n          solve2(map(uniform(-1, 1), r -> z -> v -> 0.1 * $r + 0 * $z + -0.1 * $v), 0, 0),\n          solve2(map(uniform(-1, 1), r -> z -> v -> 0.1 * $r + -0.001 *  $z + -0.003 * $v), 0, 0)\n        ),\n        p -> $p + point($x, $y)\n      )\n    )\n  )\n)"}},"rendererState":{"iterations":1000,"strokeSize":1,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"TorusCanvas":{}}}}
{"drawingState":{"seed":-4932918796897082000,"config":{"name":"drawing dsl","config":"flatMap(uniform($left, $right), x -> take(10000, flatMap(uniform($bottom, $top), y -> map(point(solve2(map(uniform(-1, 1), r -> z -> v -> add(multiply(0.1, $r), add(multiply(0, $z), multiply(-0.1, $v)))), 0, 0), solve2(map(uniform(-1, 1), r -> z -> v -> add(multiply(0.1, $r), add(multiply(-0.001, $z), multiply(-0.003, $v)))), 0, 0)), p -> add($p, point($x, $y))))))"}},"rendererState":{"iterations":1000,"strokeSize":1,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"InfiniteCanvas":{}}}}
{"drawingState":{"seed":-4932918796897082000,"config":{"name":"drawing dsl","config":"flatMap(uniform($left, $right), x -> take(10000, flatMap(uniform($bottom, $top), y -> map(point(solve2(map(uniform(-1, 1), r -> z -> v -> add(multiply(0.1, $r), add(multiply(-0.001, $z), multiply(-0.003, $v)))), 0, 0), solve2(map(uniform(-1, 1), r -> z -> v -> add(multiply(0.1, $r), add(multiply(-0.001, $z), multiply(-0.003, $v)))), 0, 0)), p -> add($p, point($x, $y))))))"}},"rendererState":{"iterations":1000,"strokeSize":1,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"InfiniteCanvas":{}}}}
{"drawingState":{"seed":-4932918796897082000,"config":{"name":"drawing dsl","config":"flatMap(uniform($left, $right), x -> take(10000, flatMap(uniform($bottom, $top), y -> map(point(solve2(map(uniform(-1, 1), r -> z -> v -> add(multiply(0.1, $r), add(multiply(-0.001, $z), multiply(-0.03, $v)))), 0, 0), solve2(map(uniform(-1, 1), r -> z -> v -> add(multiply(0.1, $r), add(multiply(-0.0001, $z), multiply(-0.0003, $v)))), 0, 0)), p -> add($p, point($x, $y))))))"}},"rendererState":{"iterations":1000,"strokeSize":1,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"InfiniteCanvas":{}}}}
{"drawingState":{"seed":6625572549827523000,"config":{"name":"drawing dsl","config":"let(radius, 2, let(friction, 0.06, solve2(map(cartesian(uniform(-$radius, $radius), uniform(-$radius, $radius)), r -> x -> v -> $r + multiply(-$friction, $v)), point(0, 0), point(0, 0))))"}},"rendererState":{"iterations":1000,"strokeSize":1,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"TorusCanvas":{}}}}
{"drawingState":{"seed":2101841964676007327,"config":{"name":"drawing dsl","config":"let(radius, 0.00001, let(viscosity, multiply($radius, 0.01), let(k, multiply($radius, 3), let(rnd, cartesian(uniform(-$radius, $radius), uniform(-$radius, $radius)), let(v, solve2(map($rnd, r -> x -> v -> $r + multiply(-$viscosity, $v) + multiply(-$k, $x)), point(0, 0), point(0, 0)), integrate(point(0, 0), $v))))))"}},"rendererState":{"iterations":1000,"strokeSize":1,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"InfiniteCanvas":{}}}}
{"drawingState":{"seed":-5783767831283592000,"config":{"name":"drawing dsl","config":"let(radius, 0.001,\nlet(viscosity, $radius * 9.995,\nlet(k, $radius * 10,\nlet(rnd, cartesian(uniform(-$radius, $radius), uniform(-$radius, $radius)),\nlet(v, solve2(map($rnd, r -> x -> v -> $r + -$viscosity * $v + -$k * $x), point(0, 0), point(0, 0)),\n\nintegrate(point(0, 0), $v)\n\n\n)))))"}},"rendererState":{"iterations":1000,"strokeSize":1,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"InfiniteCanvas":{}}}}
{"drawingState":{"seed":2322597509901331500,"config":{"name":"drawing dsl","config":"let(circle, r -> w -> polar(constant($r), integrate(0, constant($w))),\nlet(rndPoint, cartesian(uniform($left, $right), uniform($bottom, $top)),\nlet(radiuses, uniform(1, 30),\n\nflatMap(\n  $rndPoint,\n  p -> take(100, flatMap($radiuses, r -> map($circle($r, .1), p2 -> $p + $p2)))\n)\n\n)))"}},"rendererState":{"iterations":1000,"strokeSize":1,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"TorusCanvas":{}}}}
{"drawingState":{"seed":-3655810488482120700,"config":{"name":"drawing dsl","config":"let(k, .0003,\nlet(h, .003,\nlet(rnd, cartesian(uniform($left, $right), uniform($bottom, $top)),\nlet(trajectory, p -> \n\nsolve1(\n  constant(p -> point($h * y($p), -$k * x($x))),\n  $p\n),\n\nflatMap($rnd, p -> take(100, $trajectory($p)))\n\n))))"}},"rendererState":{"iterations":1000,"strokeSize":1,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"InfiniteCanvas":{}}}}
{"drawingState":{"seed":6532114603671095000,"config":{"name":"drawing dsl","config":"r = 3 in\nv = cartesian(uniform(-$r, $r), uniform(-$r, $r)) in\n\nsymm = e -> flatMap($e, p ->\n  cons($p, cons(-$p, cons(point(-x($p), y($p)), cons(point(x($p), -y($p)), empty))))\n) in\n\n$symm(integrate(point(0, 0), $v))\n  "}},"rendererState":{"iterations":1000,"strokeSize":1,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"TorusCanvas":{}}}}
{"drawingState":{"seed":3562472610624308873,"config":{"name":"drawing dsl","config":"let(scale, 500,\nlet(scaleInv, .002,\nlet(a, -1.4 * $scaleInv ,\nlet(b, 1.6 * $scaleInv,\nlet(c, 1.1,\nlet(d, 0.7 ,\nlet(rnd, cartesian(uniform($left, $right), uniform($bottom, $top)),\nlet(trajectory, p -> \n\nsolve1(\n  constant(p -> -$p + $scale * point(\n    sin($a * y($p)) + $c * cos($a * x($p)),\n    sin($b * x($p)) + $d * cos($b * y($p))\n  )),\n  $p \n),  \n   \n$trajectory(point(0, 0))\n\n))))))))"}},"rendererState":{"iterations":1000,"strokeSize":1,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"InfiniteCanvas":{}}}}
{"drawingState":{"seed":3562472610624308700,"config":{"name":"drawing dsl","config":"let(scale, .01,\nlet(scaleInv, .002,\nlet(a, -1.4 * $scaleInv ,\nlet(b, 1.6 * $scaleInv,\nlet(rnd, cartesian(uniform($left, $right), uniform($bottom, $top)),\nlet(trajectory, p -> \n    \nsolve1(\n  constant(p -> $scale * point(\n    y($p),\n    $a * x($p) * (1 +-x($p))\n  )),\n  $p \n),  \n   \nflatMap($rnd, p -> take(100, $trajectory($p)))\n\n))))))"}},"rendererState":{"iterations":1000,"strokeSize":1,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"InfiniteCanvas":{}}}}
{"drawingState":{"seed":3562472610624308700,"config":{"name":"drawing dsl","config":"let(scale, 500,\nlet(scaleInv, .002,\nlet(a, -1.4 * $scaleInv ,\nlet(b, 1.6 * $scaleInv,\nlet(c, 1.1,\nlet(d, 0.7 ,\nlet(rnd, cartesian(uniform($left, $right), uniform($bottom, $top)),\nlet(trajectory, p -> \n\nsolve1(\n  constant(p -> -$p + $scale * point(\n    sin($a * y($p)) + $c * cos($a * x($p)),\n    sin($b * x($p)) + $d * cos($b * y($p)) + .5227\n  )),\n  $p \n),  \n   \n$trajectory(point(0, 0))\n\n))))))))"}},"rendererState":{"iterations":1000,"strokeSize":1,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"InfiniteCanvas":{}}}}
{"drawingState":{"seed":3562472610624308700,"config":{"name":"drawing dsl","config":"let(rnd, cartesian(uniform($left, $right), uniform($bottom, $top)),\nlet(k, 1000000,\nlet(trajectory, p -> \n    \nsolve1(\n  constant(p -> point(\n    x($p)^2 + -y($p)^2,\n    8 * x($p) * y($p)\n  )),\n  (1 / $k) * $p \n),   \n   \nflatMap($rnd, p -> take(100, map($trajectory($p), q -> $k * $q )))\n\n)))  "}},"rendererState":{"iterations":1000,"strokeSize":1,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"InfiniteCanvas":{}}}}
{"drawingState":{"seed":-6874688422231644000,"config":{"name":"drawing dsl","config":"let(rnd, r -> n -> take($n, cartesian(uniform(-$r, $r), uniform(-$r, $r))),\n\nintegrate(point(0, 0), flatMap(uniformChoice($rnd(2, 1000), $rnd(10, 100)), x -> $x)) \n \n)"}},"rendererState":{"iterations":1000,"strokeSize":1,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"TorusCanvas":{}}}}
{"drawingState":{"seed":8390910909900460000,"config":{"name":"drawing dsl","config":"let(p1, point(0, $top),\nlet(p2, point($left, $bottom),\nlet(p3, point($right, $bottom),\n\nlet(vertexes, uniformChoice($p1, $p2, $p3),\n\nsolve1(\n  map($vertexes, v -> p -> -$p + 0.5 * ($v + $p)),\n  point(0, 0)\n)\n\n))))"}},"rendererState":{"iterations":1000,"strokeSize":1,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"TorusCanvas":{}}}}
{"drawingState":{"seed":4945722992083264174,"config":{"name":"drawing dsl","config":"let(p1, point(0, $top),\nlet(p2, point($left, $bottom),\nlet(p3, point($right, $bottom),\n\nlet(rnd, cartesian(uniform($left, $right), uniform($bottom, $top)),\nlet(vertexes, mapCons($rnd, p1 -> t1 -> mapCons($t1, p2 -> t2 -> mapCons($t2, p3 -> t3 -> uniformChoice($p1, $p2, $p3)))),\n\nsolve1(\n  map($vertexes, v -> p -> -$p + 0.5 * ($v + $p)),\n  point(0, 0)\n)\n\n))))) "}},"rendererState":{"iterations":1000,"strokeSize":1,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"TorusCanvas":{}}}}
{"drawingState":{"seed":7248679689968150738,"config":{"name":"drawing dsl","config":"let(rnd, r -> n -> take($n, cartesian(uniform(-$r, $r), uniform(-$r, $r))),\nlet(c, r -> n -> take($n, flatMap(cartesian(uniform(-$r, $r), uniform(-$r, $r)), p -> constant($p))),\n\nintegrate(\n  point(0, 0),\n  flatMap(\n    flatMap(constant(cons($rnd(3, 500), cons($c(3, 30), empty))), x -> $x),\n    x -> $x\n  )\n) \n \n))   "}},"rendererState":{"iterations":1000,"strokeSize":1,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"TorusCanvas":{}}}}
{"drawingState":{"seed":8390910909900460000,"config":{"name":"drawing dsl","config":"let(p1, point($left, $top),\nlet(p2, point($right, $top),\nlet(p3, point($right, $bottom),\nlet(p4, point($left, $bottom),\nlet(rnd, take(1, cartesian(uniform(-10, 10), uniform(-10, 10))),\nlet(vertexes, uniformChoice($p4, $p1, $p3),\n\nsolve1(\n  flatMap(\n    $vertexes,\n    v -> map($rnd,  r -> p -> -$p + $r +.5 * ($v + $p))\n  ),\n  $p1\n)\n \n))))))"}},"rendererState":{"iterations":1000,"strokeSize":1,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"TorusCanvas":{}}}}
{"drawingState":{"seed":8390910909900460000,"config":{"name":"drawing dsl","config":"sliding = fix(self ->\n    ts -> f -> mapCons($ts,\n      t1 -> tail1 -> mapCons($tail1,\n        t2 -> tail2 -> cons($f($t1, $t2), $self($tail1, $f))\n      )\n    )\n) in\n\nnoConsec = points -> flatMap(\n  $sliding($points, x1 -> x2 -> if(eq($x1, $x2),  empty, cons($x1, empty))),\n  x -> $x\n) in\n\nxs = uniformChoice(point(0, 0), point(100, 200), point(-100, -100)) in\n\n$noConsec($xs)"}},"rendererState":{"iterations":1,"strokeSize":3,"trail":{"active":true,"opacity":0.12},"offCanvasSettings":{"TorusCanvas":{}}}}
{"drawingState":{"seed":-726628358479551700,"config":{"name":"drawing dsl","config":"let(\n  sliding,\n  fix(self ->\n    ts -> f -> mapCons($ts,\n      t1 -> tail1 -> mapCons($tail1,\n        t2 -> tail2 -> cons($f($t1, $t2), $self($tail1, $f))\n      )\n    )\n  ),\n\nlet(noConsec, points -> flatMap($sliding($points, x1 -> x2 -> if(eq($x1, $x2),  empty, cons($x1, empty))), x -> $x),\n\nlet(p1, point($left, $top),\nlet(p2, point($left, $bottom),\nlet(p3, point($right, $top),\nlet(p4, point($right, $bottom),\n\nlet(vertexes, $noConsec(uniformChoice($p1, $p2, $p3, $p4)),\nlet(k, .06, \nlet(f, v -> p -> -$p + $k * $v + (-$k + 1) * $p,\nsolve1(\n  map($vertexes, v -> p -> -$p + $f($v, $p)),\n  point(0, 0)\n)\n \n)))))))))"}},"rendererState":{"iterations":1000,"strokeSize":1,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"TorusCanvas":{}}}}
{"drawingState":{"seed":8390910909900460000,"config":{"name":"drawing dsl","config":"r = 2 in\nl = 100 in\ngridSize = 100 in\n\nrndPoint = cartesian(uniformDiscrete($left, $right, $gridSize), uniformDiscrete($bottom, $top, $gridSize)) in\nbrownian = p -> take($l,integrate($p, cartesian(uniform(-$r, $r), uniform(-$r, $r)))) in\n\nflatMap($rndPoint, $brownian)"}},"rendererState":{"iterations":1000,"strokeSize":1,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"TorusCanvas":{}}}}
{"drawingState":{"seed":-8135008510173522000,"config":{"name":"drawing dsl","config":"r = 3 in\nl = 100 in\ngridSize = 100 in\n\nsymm = e -> flatMap($e, p -> \n  cons($p, cons(-$p, cons(point(-x($p), y($p)), cons(point(x($p), -y($p)), empty)))\n)) in\n\ntranslatedSymm = p -> e -> map($symm(map($e, x -> -$p + $x)), x -> $p + $x) in\n\nrndPoint = cartesian(uniformDiscrete($left, $right, $gridSize), uniformDiscrete($bottom, $top, $gridSize)) in\nbrownian = p -> take($l, integrate($p, cartesian(uniform(-$r, $r), uniform(-$r, $r)))) in\n\nflatMap($rndPoint, p -> $translatedSymm($p, $brownian($p)))"}},"rendererState":{"iterations":1000,"strokeSize":1,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"TorusCanvas":{}}}}
{"drawingState":{"seed":-8135008510173522000,"config":{"name":"drawing dsl","config":"r = 3 in\nl = 40 in\ngridSize = 50 in\n\nsymm = e -> flatMap($e, p -> \n  cons($p, cons(-$p, cons(point(-x($p), y($p)), cons(point(x($p), -y($p)), empty)))\n)) in\n\ntranslatedSymm = p -> e -> map($symm(map($e, x -> -$p + $x)), x -> $p + $x) in\n\nrndPoint = cartesian(uniformDiscrete($left, $right, $gridSize), uniformDiscrete($bottom, $top, $gridSize)) in\nbrownian = p -> take($l, integrate($p, cartesian(uniform(-$r, $r), uniform(-$r, $r)))) in\n\nflatMap($rndPoint, p -> $translatedSymm($p, $brownian($p)))"}},"rendererState":{"iterations":1000,"strokeSize":1,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"TorusCanvas":{}}}}
{"drawingState":{"seed":-4346168009450282681,"config":{"name":"drawing dsl","config":"gridSize = 200 in\nr = 6 in\nxs = take(20, integrate($left, constant($gridSize))) in\nys = take(10, integrate($bottom, constant($gridSize))) in\n\npoints = flatMap($xs, x -> map($ys, y -> point($x, $y))) in\n\nsymm = e -> flatMap($e, p -> \n  cons($p, cons(-$p, cons(point(-x($p), y($p)), cons(point(x($p), -y($p)), empty)))\n)) in\n\nbrownian = $symm(integrate(point(0, 0), cartesian(uniform(-$r, $r), uniform(-$r, $r)))) in\n\nflatMap($brownian, p -> map($points, q -> $p + $q))\n"}},"rendererState":{"iterations":1000,"strokeSize":1,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"InfiniteCanvas":{}}}}
{"drawingState":{"seed":-8135008510173522000,"config":{"name":"drawing dsl","config":"r = 3 in\ngridSize = 100 in\n\nsymm = e -> flatMap($e, p -> \n  cons($p, cons(-$p, cons(point(-x($p), y($p)), cons(point(x($p), -y($p)), empty)))\n)) in\n\n\n\ntranslatedSymm = p -> e -> map($symm(map($e, x -> -$p + $x)), x -> $p + $x) in\n\nrndPoint = <point>(uniformDiscrete($left, $right, $gridSize), uniformDiscrete($bottom, $top, $gridSize)) in\nbrownian = p -> take(floor(50 *(1 + sin(.05 * x($p)))), integrate($p, <point>(uniform(-$r, $r), uniform(-$r, $r)))) in\n\nflatMap($rndPoint, p -> $translatedSymm($p, $brownian($p)))    "}},"rendererState":{"iterations":1000,"strokeSize":1,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"TorusCanvas":{}}}}
{"drawingState":{"seed":-8135008510173522000,"config":{"name":"drawing dsl","config":"flatMap(\n  uniform($left, $right),\n  x -> take(\n    10000,\n    flatMap(\n      uniform($bottom, $top),\n      y -> map(\n        cartesian(\n          solve2(map(uniform(-1, 1), r -> z -> v -> 0.1 * $r + 0 * $z + -0.1 * $v), 0, 0),\n          solve2(map(uniform(-1, 1), r -> z -> v -> 0.1 * $r + -0.001 *  $z + -0.003 * $v), 0, 0)\n        ),\n        p -> $p + point($x, $y)\n      )\n    )\n  )\n)"}},"rendererState":{"iterations":1000,"strokeSize":1,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"TorusCanvas":{}}}}
{"drawingState":{"seed":-5430292056105469350,"config":{"name":"drawing dsl","config":"gridSize = 100 in\n\nsymm = e -> flatMap(e, p -> \n  cons(p, cons(-p, cons(point(-x(p), y(p)), cons(point(x(p), -y(p)), empty)))\n)) in\n\ntranslatedSymm = p -> e -> map(symm(map(e, x -> -p + x)), x -> p + x) in\n\nrndPoint = @point(uniformDiscrete(left, right, gridSize), uniformDiscrete(bottom, top, gridSize)) in\n  \nl = 100 in\nstep = 10 in\nps = uniformFrom(4, [point(1, 0), point(0, 1), point(-1, 0), point(0, -1)]) in\nvs = flatMap(ps, p -> take(step, @(p))) in\nevo = p ->  take(l, integrate(p, vs)) in \n     \nflatMap(rndPoint, p -> translatedSymm(p, evo(p)))     "}},"rendererState":{"iterations":30000,"strokeSize":1,"resolutionFactor":2,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"TorusCanvas":{}}}}
{"drawingState":{"seed":3143336075212150300,"config":{"name":"drawing dsl","config":"r1 = 300 in\nw1 = .001 in\nr2 = 100 in\nw2 = .002 in\nr3 = 100 in\nw3 = 1 in\nr4 = 10 in\nw4 = .008 in\nr5 = 100 in\nw5 = .008 in\n\ncircle = r -> w -> polar(constant($r), integrate(0, constant($w))) in\n\n\n\n$circle($r1, $w1) +\n$circle($r2, $w2) +\n$circle($r3, $w3) +\n$circle($r4, $w4) +\n$circle($r5, $w5)"}},"rendererState":{"iterations":1000,"strokeSize":1,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"TorusCanvas":{}}}}
{"drawingState":{"seed":-5531568967667790200,"config":{"name":"drawing dsl","config":"l = 200 in\ngridSize = 200 in\n\nsymm = e -> flatMap($e, p -> \n  cons($p, cons(-$p, cons(point(-x($p), y($p)), cons(point(x($p), -y($p)), empty)))\n)) in\n\ntranslatedSymm = p -> e -> map($symm(map($e, x -> -$p + $x)), x -> $p + $x) in\n\nrndPoint = cartesian(uniformDiscrete($left, $right, $gridSize), uniformDiscrete($bottom, $top, $gridSize)) in\n//evo = p -> take($l, integrate($p, cartesian(uniform(-$r, $r), uniform(-$r, $r)))) in\n\nr = 20 in\nv = .3 in\nw = $v / $r in\n\narcLength =floor(.5 * PI / $w) in\narc = angle -> take($arcLength, polar(constant($r * $w), integrate($angle, constant($w)))) in  \nsegmentLength = floor($r / $v) in  \nsegment = p -> take($segmentLength, constant($v * $p)) in \nvs = uniformChoice(\n  $arc(0), $arc(PI / 2), $arc(PI), $arc(3 * PI / 2),\n  $segment(point(1, 0)), $segment(point(0, 1)), $segment(point(-1, 0)), $segment(point(0, -1))\n) in \n\nevo = p -> take(floor(1 + $l / $v), integrate($p, flatMap($vs, x -> $x))) in\n\n\nflatMap($rndPoint, p -> $translatedSymm($p, $evo($p)))"}},"rendererState":{"iterations":1000,"strokeSize":1,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"TorusCanvas":{}}}}
{"drawingState":{"seed":-9071197128387577000,"config":{"name":"drawing dsl","config":"a = -.000001 in\nk = 0.01 in\nrnd = cartesian(uniform($left, $right), uniform($bottom, $top)) in\n\n//eq = constant(p -> point($k *y($p), - $h * x($p)^3 + $h * x($p))) in\n\nsqNorm = p -> x($p)^2 + y($p)^2 in\n\ntrajectory = p -> \n\nsolve1(\n  constant(q -> $k * point(\n     -y($q) + $a * x($q) * $sqNorm($q),\n     x($q) + $a * y($q) * $sqNorm($q)\n  )),\n  $p\n) in\n\n\nflatMap($rnd, p -> take(100, $trajectory($p)))"}},"rendererState":{"iterations":2000,"strokeSize":1,"trail":{"active":false,"opacity":0.11},"offCanvasSettings":{"InfiniteCanvas":{}}}}
{"drawingState":{"seed":-9071197128387577000,"config":{"name":"drawing dsl","config":"a = -.000001 in\nk = 0.01 in\nrnd = cartesian(uniform($left, $right), uniform($bottom, $top)) in\n\n//eq = constant(p -> point($k *y($p), - $h * x($p)^3 + $h * x($p))) in\n\nsqNorm = p -> x($p)^2 + y($p)^2 in\n\ntrajectory = p -> \n\nsolve1(\n  constant(q -> $k * point(\n     -y($q) + $a * x($q) * $sqNorm($q),\n     x($q) + $a * y($q) * $sqNorm($q)\n  )),\n  $p\n) in\n\n\nflatMap($rnd, p -> take(100, $trajectory($p)))"}},"rendererState":{"iterations":2000,"strokeSize":1,"trail":{"active":false,"opacity":0.11},"offCanvasSettings":{"InfiniteCanvas":{}}}}
{"drawingState":{"seed":-9071197128387577000,"config":{"name":"drawing dsl","config":"a = -.000001 in\nk = 0.01 in\n\nrnd = polar(uniform(0, $top), uniform(0, 2 * PI)) in\nsqNorm = p -> x($p)^2 + y($p)^2 in\n\ntrajectory = p -> \n\nsolve1(\n  constant(q -> $k * (point(-y($q), x($q)) + $a * $sqNorm($q) * $q) ),\n  $p\n) in\n\n\nflatMap($rnd, p -> take(1000, $trajectory($p)))"}},"rendererState":{"iterations":2000,"strokeSize":1,"trail":{"active":false,"opacity":0.11},"offCanvasSettings":{"InfiniteCanvas":{}}}}
{"drawingState":{"seed":-9071197128387577000,"config":{"name":"drawing dsl","config":"k = 0.01 in\nl = 100 in\na = -1 in\nb = -2 in\nc = 0 in\nzoom = 1 in\n\nrnd = cartesian(uniform($left, $right), uniform($bottom, $top)) in\n//sqNorm = p -> x($p)^2 + y($p)^2 in\n\n//vectorField = p -> $k * $p in\nvectorField = z -> p -> $k * point(y($p), $a * x($p) + $b * y($p) + $c ) in\n\ntrajectory = p -> \n\nmap(solve1(\n  constant($vectorField($zoom)),\n  (1 / $zoom) * $p\n), p -> $zoom * $p) in\n \n\nflatMap($rnd, p -> take($l, $trajectory($p))) "}},"rendererState":{"iterations":2000,"strokeSize":1,"trail":{"active":false,"opacity":0.11},"offCanvasSettings":{"InfiniteCanvas":{}}}}
{"drawingState":{"seed":-1041891505883769500,"config":{"name":"drawing dsl","config":"r = .03 in\ns = 100 in\ng = 100 in\n\nmid = point($g/2, $g/2) in\nvectorField = p -> $r * (-$mid +point(y($p) % $g, (-x($p)) % $g)) in\npoints = <point>(uniform($left, $right), uniform($bottom, $top)) in\n\nline = p -> solve1(\n  constant($vectorField),\n  $p\n) in\n\nflatMap($points, p -> take($s, $line($p)))"}},"rendererState":{"iterations":1000,"strokeSize":1,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"TorusCanvas":{}}}}
{"drawingState":{"seed":7434307552844485000,"config":{"name":"drawing dsl","config":"\na = 48271 in b = 0 in m = 2^31 +-1 in\nk = 2 / $m in\n\ngridSize = 100 in\n\nrnd = prev -> ($a * $prev + $b) % $m in\nnormalise = prev -> 2 * $rnd($prev) / $m + -1 in \n\nspeed = p -> point(\n  $normalise($rnd(x($p) + $gridSize * y($p))),\n  $normalise($rnd(y($p)+  $gridSize * x($p)))\n) in\n\nrandomPoint = <point>(uniform($left, $right), uniform($bottom, $top)) in\n\n\ngridPoint = p -> point(\n  toDbl(floor(x($p) / $gridSize)),\n  toDbl(floor(y($p) / $gridSize))\n) + point($gridSize, $gridSize) in\n\nline = p -> take(20, integrate($p, <$speed($gridPoint($p))>)) in\n\nflatMap($randomPoint, $line)\n\n\n\n \n"}},"rendererState":{"iterations":3000,"strokeSize":1,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"InfiniteCanvas":{}}}}
{"drawingState":{"seed":-1041891505883769500,"config":{"name":"drawing dsl","config":"r = .03 in\ns = 30 in\ng = 200 in\n\na = 0 in b = 1 in c = -1 in d = 0 in\n\nmid = point($g/2, $g/2) in\n\n\nsingleVectorField = p -> point(\n  $a * x($p) + $b * y($p),\n  $c * x($p) + $d * y($p)\n) in\n\npointSign = p -> point(sign(x($p)), sign(y($p))) in\n\npointMod = p -> -$mid + point(\n  x($p) % $g,\n  y($p) % $g\n) in\n\nvectorField = p -> $r * ($singleVectorField($pointMod($p))) in\n\npoints = <point>(uniform($left, $right), uniform($bottom, $top)) in\n\nline = p -> solve1(\n  constant($vectorField),\n  $p\n) in\n\nflatMap($points, p -> take($s, $line($p)))"}},"rendererState":{"iterations":1000,"strokeSize":1,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"InfiniteCanvas":{}}}}
{"drawingState":{"seed":-1041891505883769500,"config":{"name":"drawing dsl","config":"r = .01 in\ns = 60 in\ng = 150 in\n\na = 0 in b = 1 in c = -1 in d = 0 in\n\nmid = point($g/2, $g/2) in\n\n\nsingleVectorField = p -> point(\n  $a * x($p) + $b * y($p),\n  $c * x($p) + $d * y($p)\n) in\n\npointSign = p -> (abs(x($p)) + abs(y($p))) * point(sign(x($p)), sign(y($p))) in\n\npointMod = p -> -$mid + point(\n  x($p) % $g,\n  y($p) % $g\n) in\n\nvectorField = p -> $r * ($singleVectorField($pointSign($pointMod($p)))) in\n\npoints = <point>(uniform($left, $right), uniform($bottom, $top)) in\n\nline = p -> solve1(\n  constant($vectorField),\n  $p\n) in\n\nflatMap($points, p -> take($s, $line($p)))"}},"rendererState":{"iterations":1000,"strokeSize":1,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"InfiniteCanvas":{}}}}
{"drawingState":{"seed":1942116250526075996,"config":{"name":"drawing dsl","config":"n = 8 in\nr = 3 in\n\na = 1 in b = 1 in c = 1 in d = 1 in\n\nps = integrate(point(0, 0), <point>(uniform(-$r, $r), uniform(-$r, $r))) in\n\nangles = n -> take($n, integrate(0, <2 * PI / toDbl($n)>)) in\n\nrotate = angle -> p -> point(\n  x($p) * cos($angle) +-y($p) * sin($angle),\n  x($p) * sin($angle) + y($p) * cos($angle)\n) in\n\n\nsymm = n -> p -> map($angles($n), a -> $rotate($a, $p)) in\n\n//flatMap($ps, p -> [$p, -$p, $rotate(PI/2, $p), $rotate(-PI/2, $p)])\n\nflatMap($ps, p -> map($angles($n), a -> $rotate($a, $p)))"}},"rendererState":{"iterations":1000,"strokeSize":1,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"TorusCanvas":{}}}}
{"drawingState":{"seed":-7147718828912257921,"config":{"name":"drawing dsl","config":"\na = -.1 in b = -1 in c = 1 in\nrbrownian = 1 in\nrf = 100 in\ne = 1000 in\n\ndist = map(uniform(0, 1), x -> $rf *(2 * $x^$e + -1)) in\n\nn = <point>($dist, $dist) in\n\noscillator = solve2(\n  map($n, rn -> x -> v -> $a * $x + $b * $v + $rn),\n  point(0, 0),\n  point(0, 0)\n) in\n\n\nbrownian = integrate(point(0, 0), <point>(\n  uniform(-$rbrownian, $rbrownian),\n  uniform(-$rbrownian, $rbrownian)\n)) in\n\n$brownian <+> $oscillator\n\n"}},"rendererState":{"iterations":1000,"strokeSize":1,"trail":{"active":false,"opacity":0.012},"offCanvasSettings":{"TorusCanvas":{}}}}
{"drawingState":{"seed":-6263139224327705629,"config":{"name":"drawing dsl","config":"\na = -.1 in b = -1 in c = 1 in\nrbrownian = 2 in\nrf = 100 in\nmu = 1 in\nsigma = 1 in\nk = 3 in\n\nangles = n -> take($n, integrate(0, <2 * PI / toDbl($n)>)) in\n\nrotate = angle -> p -> point(\n  x($p) * cos($angle) +-y($p) * sin($angle),\n  x($p) * sin($angle) + y($p) * cos($angle)\n) in\n\ndist = normal($mu, $sigma) in\n\nn = <$k> <*> <point>($dist, $dist) in\n\noscillator = solve2(\n  map($n, rn -> x -> v -> $a * $x + $b * $v + $rn),\n  point(0, 0),\n  point(0, 0)\n) in\n\n\nbrownian = integrate(point(0, 0), <point>(\n  uniform(-$rbrownian, $rbrownian),\n  uniform(-$rbrownian, $rbrownian)\n)) in\n\nevo = $brownian <+> $oscillator in\n\nflatMap($evo, p -> map($angles(7), a -> $rotate($a, $p)))\n\n\n"}},"rendererState":{"iterations":1000,"strokeSize":1,"trail":{"active":false,"opacity":0.012},"offCanvasSettings":{"TorusCanvas":{}}}}
{"drawingState":{"seed":-8218487852415777552,"config":{"name":"drawing dsl","config":"gridSize = 100 in\nl = 10 in\n\nnX = ($right +- $left) / $gridSize in\nnY = ($top +- $bottom) / $gridSize in\ntot = floor($nX * $nY) in\n\ngridPointsX = take(floor($nX), integrate($left, <$gridSize>)) in\ngridPointsY = take(floor($nY), integrate($bottom, <$gridSize>)) in\n\ngridPoints = flatMap($gridPointsX, x -> map($gridPointsY, y -> point($x, $y))) in\n\n\n\nrndPointInCell = <point>(uniform(0, $gridSize), uniform(0, $gridSize)) in\n\nangles = uniform(0, 2 * PI) in\n\ntrajectoriesFunc = zipWith($gridPoints, $angles, g -> a -> p -> integrate($g + $p, <polar(3, $a)>)) in\n\ntrajectories = zipWith($rndPointInCell, uniformFrom($tot, $trajectoriesFunc), p -> f -> $f($p)) in\n\n\nflatMap($trajectories, x -> take($l, $x))\n"}},"rendererState":{"iterations":1000,"strokeSize":1,"resolutionFactor":2,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"InfiniteCanvas":{}}}}
{"drawingState":{"seed":731371275426002809,"config":{"name":"drawing dsl","config":"r = .02 in\nw = .01 in\n\nr2 = .02 in\n\nspiral = @polar(integrate(0, @(r)), integrate(0, @(w))) in\n\nspeed1 = mapCons(uniform(1000, 3000), n -> o -> take(floor(n), map(spiral, v -> p -> v - p))) in\n\nspeed2v = integrate(point(0, 0), @point(uniform(-r2, r2), uniform(-r2, r2))) in\n\nspeed2 = take(1000, map(speed2v, v -> p -> v)) in\n\nspeed = concat(speed1, speed2) in\n\nsolve1(\n  speed,\n  point(0, 0)\n)\n"}},"rendererState":{"iterations":1000,"strokeSize":1,"resolutionFactor":2,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"TorusCanvas":{}}}}
{"drawingState":{"seed":989587977627549175,"config":{"name":"drawing dsl","config":"r = 2 in\nw = .01 in\n\nr2 = .02 in\n\nspiral = @polar(integrate(0, @(r)), integrate(0, @(w))) in\nspiralAcc = map(derive2(spiral), p -> (x -> v -> p - v)) in\ntangentAcc = @(x -> v -> point(0, 0)) in\n\nspiralAccs = map(uniform(1000, 3000), n -> take(floor(n), spiralAcc)) in\ntangentAccs = map(uniform(800, 1000), n -> take(floor(n), tangentAcc)) in\n\nacc = flatMap(zipWith(spiralAccs, tangentAccs, x -> y -> concat(x, y)), z -> z) in\n\nsolve2(\n  acc,\n  point(0, 0),\n  point(0, 0)\n)\n"}},"rendererState":{"iterations":1000,"strokeSize":1,"resolutionFactor":2,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"TorusCanvas":{}}}}
{"drawingState":{"seed":-6215785933623105000,"config":{"name":"drawing dsl","config":"r = 2 in\nw = 0.01 in\n\nr2 = .02 in\nc = 5 in\n\n\nspiral = @polar(integrate(0, @(r)), integrate(0, @(w))) in\nspiralAcc = map(derive2(spiral), p -> (x -> v -> versor(p - v))) in\ntangentAcc = @(x -> v -> point(0, 0)) in\n\n\n\nspiralAccs = map(uniform(3000, 6000), n -> take(floor(n), spiralAcc)) in\ntangentAccs = map(uniform(800, 1000), n -> take(floor(n), tangentAcc)) in\n\nacc = flatten(zipWith(spiralAccs, tangentAccs, x -> y -> concat(x, y))) in\n\nsolve2(\n  acc,\n  point(0, 0),\n  point(0, 0)\n)\n"}},"rendererState":{"iterations":1000,"strokeSize":1,"resolutionFactor":2,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"TorusCanvas":{}}}}
{"drawingState":{"seed":5998254162021243000,"config":{"name":"drawing dsl","config":"r = .1 in\nw = 0.01 in\n\nr2 = .02 in\nc = 5 in\n\n\nspiral = @polar(integrate(0, @(r)), integrate(0, @(w))) in\n\nrotate = p -> point(y(p), -x(p)) in\n\nflatten(mapWithDerivative(\n  x -> v -> take(100, integrate(x, @(0.1 * rotate(v)))),\n  spiral\n))"}},"rendererState":{"iterations":1000,"strokeSize":1,"resolutionFactor":2,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"InfiniteCanvas":{}}}}
{"drawingState":{"seed":6227365779132189000,"config":{"name":"drawing dsl","config":"k = 2 in\nstep = 1 in\nradius = 5 in\nangularSpeedFactor = 1 in\nstraightStepLength = 20 in\nmaxStraightSteps = 32 in\n\n\nangle = 3 * PI / 2 in\n\n\nrotate = v -> alpha -> point(x(v) * cos(alpha) - y(v) * sin(alpha), x(v) * sin(alpha) + y(v) * cos(alpha)) in\n\nrotation = v -> map(\n  take(1 + floor(angle * radius / angularSpeedFactor), integrate(0, @(angularSpeedFactor / radius))),\n  a -> angularSpeedFactor * rotate(v, -a)\n) in\n\ns = n -> v -> concat(take(floor(n), @(v)), rotation(v)) in\n\nversors = flatten(@([point(step, 0), point(0, step), point(-step, 0), point(0, -step)])) in\n\nlengths = uniformFrom(maxStraightSteps, map(integrate(3, @(1)), k -> straightStepLength * k + 2 * radius)) in \n\nspeed = flatten(zipWith(lengths, versors, s)) in\n\n\n\nintegrate(point(0, 0), speed)\n\n"}},"rendererState":{"iterations":1000,"strokeSize":2,"resolutionFactor":2,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"InfiniteCanvas":{}}}}
{"drawingState":{"seed":960518807058000600,"config":{"name":"drawing dsl","config":"\n\nk = 10 in\nstep = 1 in\nradius = 20 in\nangularSpeedFactor = 1 in\nstraightStepLength = 100 in\nmaxStraightSteps = 8 in\nnumberOfParallelLines = 4 in\ndistanceBetweenParallelLines = 10 in\n\nangle = 3 * PI / 2 in\n\n\nrotate = v -> alpha -> point(x(v) * cos(alpha) - y(v) * sin(alpha), x(v) * sin(alpha) + y(v) * cos(alpha)) in\n\nrotation = v -> map(\n  take(1 + floor(angle * radius / angularSpeedFactor), integrate(0, @(angularSpeedFactor / radius))),\n  a -> angularSpeedFactor * rotate(v, -a)\n) in\n\ns = n -> v -> concat(take(floor(n), @(v)), rotation(v)) in\n\nversors = flatten(@([point(step, 0), point(0, step), point(-step, 0), point(0, -step)])) in\n\nlengths = uniformFrom(maxStraightSteps, map(integrate(3, @(1)), k -> straightStepLength * k + 2 * radius)) in \n\nspeed = flatten(zipWith(lengths, versors, s)) in\n\n\n\nflatten(mapWithDerivative(\n  x -> v -> take(numberOfParallelLines, integrate(x, @(distanceBetweenParallelLines *rotate(versor(v), pi / 2)))),\n  integrate(point(0, 0), speed)\n))\n\n"}},"rendererState":{"iterations":1000,"strokeSize":2,"resolutionFactor":2,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"TorusCanvas":{}}}}
{"drawingState":{"seed":874728401246465800,"config":{"name":"drawing dsl","config":"k = 2 in\nstep = 1 in\nradius = 5 in\nspiralDistances = .2 in\nnumberOfRotations = 3 in\nangularSpeedFactor = .2 in\nstraightStepLength = 50 in\nmaxStraightSteps = 32 in\n\n\nangle = 3 * PI / 2 in\nrotationIterations = numberOfRotations * (1 + floor(angle * radius / angularSpeedFactor)) in\n\n\nrotate = v -> alpha -> spiralDistances * alpha *  point(x(v) * cos(alpha) - y(v) * sin(alpha), x(v) * sin(alpha) + y(v) * cos(alpha)) in\n\nrotation = v -> map(\n  take(rotationIterations, integrate(0, @(angularSpeedFactor / radius))),\n  a -> angularSpeedFactor * rotate(v, -a)\n) in\n\ns = n -> v -> concat(take(floor(n), @(v)), rotation(v)) in\n\nversors = flatten(@([point(step, 0), point(0, step), point(-step, 0), point(0, -step)])) in\n\nlengths = uniformFrom(maxStraightSteps, map(integrate(3, @(1)), k -> straightStepLength * k + 2 * radius)) in \n\nspeed = flatten(zipWith(lengths, versors, s)) in\n\n\n\nintegrate(point(0, 0), speed)\n\n"}},"rendererState":{"iterations":1000,"strokeSize":2,"resolutionFactor":2,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"TorusCanvas":{}}}}
{"drawingState":{"seed":-4081878662484276000,"config":{"name":"drawing dsl","config":"viscosity = .001 in\nk = 0 in\nrandomForceStrength = .1 in\northogonalLineLength = 50 in\northogonalFactor = .3 in\n\nrandomForces = @point(\n  uniform(-randomForceStrength, randomForceStrength),\n  uniform(-randomForceStrength, randomForceStrength)\n) in\n\nacceleration = r -> x -> v -> r -viscosity * v + k * x in\n\nline = solve2(\n  map(randomForces, acceleration),\n  point(0, 0),\n  point(0, 0)\n) in\n\nflatten(mapWithDerivative(\n  p -> v ->\n    rotated = orthogonalFactor * point(y(v), -x(v)) in\n    start = p - (toDbl(orthogonalLineLength)/2) * rotated in\n    integrate(start, take(orthogonalLineLength, @(rotated))),\n  line\n))"}},"rendererState":{"iterations":1000,"strokeSize":1,"resolutionFactor":2,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"TorusCanvas":{}}}}
{"drawingState":{"seed":4743674804447376000,"config":{"name":"drawing dsl","config":"rndPoint = @point(uniform(left, right), uniform(bottom, top)) in\nf = 60 in\nv = 2 in\n\nmapCons(noise, n -> notUsed ->\n  mapCons(uniform(1, 256), r -> notUsed ->\n    line = p -> solve1(\n      @(q -> polar(v, 6 * (2^.5) * PI * n((1 / f) * q))),\n      p\n    ) in\n    flatMap(\n      rndPoint,\n      p -> take(300, line(p))\n    )\n  )\n) \n"}},"rendererState":{"iterations":1000,"strokeSize":1,"resolutionFactor":2,"trail":{"active":false,"opacity":0.12},"offCanvasSettings":{"InfiniteCanvas":{}}}}